language: python

#python:
#  # This is not actually used. Because it would take an overly long time
  # to build scipy we cannot use the virtual env of travis. Instead, we
  # use miniconda.
#  - 2.7
#  - 3.3
 # - 3.4

# NOTE: Please do not add new packages to CONDA_CONDITIONS without considering whether they
# belong somewhere in requirements/*.txt. proj4 is a non-python dependency which falls into this category.
env:
 global:
  - PEP8=1.5.7
 matrix:
# Test py2.7 with an older matplotlib
 - PY_VERSION=2.7
   CONDA_CONDITIONS="numpy=1.7 matplotlib=1.3 scipy=0.12 libpng=1.5 proj4=4.9 pep8=${PEP8}";
# Test py2.7 with the latest matplotlib
# - PY_VERSION=2.7
#   CONDA_CONDITIONS="proj4=4.9 pep8=${PEP8}";
# Test py2.7 with an older proj4
# - PY_VERSION=2.7
#   CONDA_CONDITIONS="numpy=1.7 matplotlib=1.3 scipy=0.12 libpng=1.5 proj4=4.8 pep8=${PEP8}";
 - PY_VERSION=3.3
   CONDA_CONDITIONS="numpy=1.7 matplotlib=1.3 scipy=0.12 libpng=1.5 proj4=4.9 pep8=${PEP8}";
 - PY_VERSION=3.4
   CONDA_CONDITIONS="numpy=1.8 matplotlib=1.3 scipy=0.14 libpng=1.5 proj4=4.9 pep8=${PEP8}"

sudo: false

git:
  # We need a decent amount of history to check license dates.
  depth: 10000

install:
  # Install miniconda
  # -----------------
  - if [[ "${PY_VERSION}" == 2* ]]; then
      wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"

  # Create the basic testing environment
  # ------------------------------------
  - conda config --set changeps1 no --set show_channel_urls yes
  - conda config --add channels scitools
  - conda update conda --yes
  - conda create -n test-environment --yes
                                     --file=requirements/default.txt
                                     --file=requirements/tests.txt
                                     --file=requirements/plotting.txt
                                     --file=requirements/ows.txt
                                     --file=requirements/epsg.txt
                                     python=${PY_VERSION}
                                     ${CONDA_CONDITIONS}
  - source activate test-environment
#  - PACKAGES="$PACKAGES requests"

  # For traceability, list the installed packages.
  - conda list

  # Configure matplotlib to use the agg backend.
  - MPL_CONFIG_DIR=~/.config/matplotlib
  - mkdir -p $MPL_CONFIG_DIR
  - echo "backend" ":" "agg" > $MPL_CONFIG_DIR/matplotlibrc

  - python setup.py --quiet install

script:
  - mkdir ../test_folder
  - cd ../test_folder
  - CARTOPY_GIT_DIR=$TRAVIS_BUILD_DIR nosetests cartopy --with-doctest -sv
  # Check that the downloader tool at least knows where to get the data from (but don't actually download it)
  - python $TRAVIS_BUILD_DIR/tools/feature_download.py gshhs physical --dry-run

after_failure:
  - source activate test-environment
  - python -c "from __future__ import print_function; import cartopy.tests.mpl; print(cartopy.tests.mpl.failed_images_html())"
